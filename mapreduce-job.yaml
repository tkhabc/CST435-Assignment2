apiVersion: v1
kind: ConfigMap
metadata:
  name: input-data
data:
  temperature-data.csv: |-
    # Python script to generate data
    import numpy as np

    data_size = 10
    data = []
    for i in range(data_size):
        month = (i % 12) + 1  
        temp = 20 + np.random.normal(0, 5) 
        data.append((month, temp))

    # Print data in CSV format
    with open("/input/temperature-data.csv", "w") as f:
        for month, temp in data:
            f.write(f"{month},{temp:.2f}\n")
---
apiVersion: batch/v1
kind: Job
metadata:
  name: temperature-mapreduce
spec:
  template:
    spec:
      containers:
      - name: mapreduce
        image: python:3.8
        command: ["/bin/sh", "-c"]
        args: 
        - |
          pip install psutil numpy && \
          python /scripts/generate_data.py && \
          cat /input/temperature-data.csv | python /scripts/mapper.py | sort | python /scripts/reducer.py
        volumeMounts:
        - name: generate-data-script
          mountPath: /scripts/generate_data.py
          subPath: generate_data.py
        - name: mapper-script
          mountPath: /scripts/mapper.py
          subPath: mapper.py
        - name: reducer-script
          mountPath: /scripts/reducer.py
          subPath: reducer.py
        - name: input-data
          mountPath: /input
      restartPolicy: Never
      volumes:
      - name: generate-data-script
        configMap:
          name: generate-data-script
          defaultMode: 0755
      - name: mapper-script
        configMap:
          name: mapper-script
          defaultMode: 0755
      - name: reducer-script
        configMap:
          name: reducer-script
          defaultMode: 0755
      - name: input-data
        emptyDir: {} 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: generate-data-script
data:
  generate_data.py: |-
    import numpy as np

    data_size = 10000
    data = []
    for i in range(data_size):
        month = (i % 12) + 1  
        temp = 20 + np.random.normal(0, 5) 
        data.append((month, temp))

    # Print data in CSV format
    with open("/input/temperature-data.csv", "w") as f:
        for month, temp in data:
            f.write(f"{month},{temp:.2f}\n")
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mapper-script
data:
  mapper.py: |-
    #!/usr/bin/env python3
    import sys
    import time
    import psutil
    import os

    def capture_metrics():
        process = psutil.Process(os.getpid())
        return {
            "memory_mb": process.memory_info().rss / 1024 / 1024,
            "cpu_percent": process.cpu_percent(interval=0.1),
        }

    def mapper():
        start_time = time.time()
        metrics = {"start_metrics": capture_metrics()}

        for line in sys.stdin:
            try:
                line = line.strip()
                if not line:
                    continue
                month, temperature = line.split(',')
                print(f'{month}\t{temperature}')
            except Exception as e:
                sys.stderr.write(f'Error processing line: {line}, Error: {str(e)}\n')
                continue

        metrics["end_metrics"] = capture_metrics()
        metrics["process_time"] = time.time() - start_time
        print(f"Processing time: {metrics['process_time']:.3f} seconds", file=sys.stderr)
        print(f"Memory usage: {metrics['end_metrics']['memory_mb']:.2f} MB", file=sys.stderr)
        print(f"CPU usage: {metrics['end_metrics']['cpu_percent']:.1f}%", file=sys.stderr)
        print(f"Memory change: {metrics['end_metrics']['memory_mb'] - metrics['start_metrics']['memory_mb']:.2f} MB", file=sys.stderr)

    if __name__ == '__main__':
        mapper()
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: reducer-script
data:
  reducer.py: |-
    #!/usr/bin/env python3
    import sys
    import time
    import psutil
    import os

    def capture_metrics():
        process = psutil.Process(os.getpid())
        return {
            "memory_mb": process.memory_info().rss / 1024 / 1024,
            "cpu_percent": process.cpu_percent(interval=0.1),
        }

    def reducer():
        start_time = time.time()
        metrics = {"start_metrics": capture_metrics()}

        current_month = None
        temperature_sum = 0
        temperature_count = 0

        for line in sys.stdin:
            try:
                line = line.strip()
                if not line:
                    continue
                month, temperature = line.split('\t')
                temperature = float(temperature)
                if current_month == month:
                    temperature_sum += temperature
                    temperature_count += 1
                else:
                    if current_month:
                        average = temperature_sum / temperature_count
                        print(f'{current_month}\t{average:.2f}')
                    current_month = month
                    temperature_sum = temperature
                    temperature_count = 1
            except Exception as e:
                sys.stderr.write(f'Error processing line: {line}, Error: {str(e)}\n')
                continue

        if current_month:
            average = temperature_sum / temperature_count
            print(f'{current_month}\t{average:.2f}')

        metrics["end_metrics"] = capture_metrics()
        metrics["process_time"] = time.time() - start_time
        print(f"Processing time: {metrics['process_time']:.3f} seconds", file=sys.stderr)
        print(f"Memory usage: {metrics['end_metrics']['memory_mb']:.2f} MB", file=sys.stderr)
        print(f"CPU usage: {metrics['end_metrics']['cpu_percent']:.1f}%", file=sys.stderr)
        print(f"Memory change: {metrics['end_metrics']['memory_mb'] - metrics['start_metrics']['memory_mb']:.2f} MB", file=sys.stderr)

    if __name__ == '__main__':
        reducer()